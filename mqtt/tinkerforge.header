#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright (C) 2019 Erik Fleckstein <erik@tinkerforge.com>
#
# Version <<VERSION>>
#
# Redistribution and use in source and binary forms of this file,
# with or without modification, are permitted. See the Creative
# Commons Zero (CC0 1.0) License for more details.

import sys
import os
import signal
import time
import shlex
import socket
import select
import threading
import subprocess
import textwrap
from collections import namedtuple, OrderedDict
import re

if sys.version_info < (3, 3):
    from collections import Hashable
else:
    from collections.abc import Hashable

import json
import logging
import traceback
import argparse

INTERNAL_DEVICE_DISPLAY_NAMES = True

# error codes are also used as exit codes, valid values are [1..255]
ERROR_INTERRUPTED = 1
ERROR_SYNTAX_ERROR = 2
ERROR_PYTHON_VERSION = 21
ERROR_ARGPARSE_MISSING = 22
ERROR_SOCKET_ERROR = 23
ERROR_OTHER_EXCEPTION = 24
ERROR_INVALID_PLACEHOLDER = 25
ERROR_AUTHENTICATION_ERROR = 26
ERROR_OUTPUT_NOT_ESCAPABLE_ERROR = 27
ERROR_PAHO_MISSING = 28
ERROR_PAHO_VERSION = 29
ERROR_NO_CONNECTION_TO_BROKER = 30
ERROR_COULD_NOT_READ_INIT_FILE = 31
ERROR_COULD_NOT_READ_CMDLINE_FILE = 32
ERROR_INVALID_GLOBAL_TOPIC_PREFIX = 33
IPCONNECTION_ERROR_OFFSET = 200

logging.basicConfig(format='%(asctime)s <%(levelname)s> %(name)s: %(message)s')

try:
    logging.root.name = 'MQTT bindings'
except:
    pass

def fatal_error(message, exit_code):
    logging.critical(message)
    sys.exit(exit_code)

try:
    import paho.mqtt
except (ImportError, ModuleNotFoundError):
    fatal_error('Requiring paho-mqtt 1.3.1 or newer', ERROR_PAHO_MISSING)

def parse_version(v):
    m = re.fullmatch(r"(\d+)\.(\d+)\.(\d+)(?:-(\d+))?", v)
    if m is None:
        raise Exception("Failed to parse {}".format(v))

    major, minor, patch, package = m.groups()
    if package is None:
        package = 0

    return (major, minor, patch, package)

if parse_version(paho.mqtt.__version__) < parse_version('1.3.1'):
    fatal_error('Requiring paho-mqtt 1.3.1 or newer, but found ' + str(paho.mqtt.__version__), ERROR_PAHO_VERSION)

import paho.mqtt.client as mqtt

if sys.hexversion < 0x02070900:
    fatal_error('Requiring Python 2.7.9 or 3.4 or newer', ERROR_PYTHON_VERSION)

if sys.hexversion > 0x03000000 and sys.hexversion < 0x03040000:
    fatal_error('Requiring Python 2.7.9 or 3.4 or newer', ERROR_PYTHON_VERSION)

try:
    import argparse
except (ImportError, ModuleNotFoundError):
    fatal_error('Requiring python argparse module', ERROR_ARGPARSE_MISSING)

if sys.hexversion < 0x03000000:
    logging.warning('Python 2 support is deprecated and will be removed in the future')

FunctionInfo = namedtuple('FunctionInfo', ['id', 'arg_names', 'arg_types', 'arg_symbols', 'payload_fmt', 'result_names', 'result_types', 'result_symbols', 'response_size', 'response_fmt'])
HighLevelFunctionInfo = namedtuple('HighLevelFunctionInfo',
    ['low_level_id', 'direction',
     'high_level_roles_in', 'high_level_roles_out', 'low_level_roles_in', 'low_level_roles_out',
     'arg_names', 'arg_types', 'arg_symbols', 'format_in', 'result_names', 'result_types', 'result_symbols', 'response_size', 'format_out',
     'chunk_padding', 'chunk_cardinality', 'chunk_max_offset',
     'short_write', 'single_read', 'fixed_length'])
CallbackInfo = namedtuple('CallbackInfo', ['id', 'names', 'types', 'symbols', 'fmt', 'high_level_info'])
