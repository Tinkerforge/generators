#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2019 Erik Fleckstein <erik@tinkerforge.com>
#
# Version <<VERSION>>
#
# Redistribution and use in source and binary forms of this file,
# with or without modification, are permitted. See the Creative
# Commons Zero (CC0 1.0) License for more details.

import sys
import os
import signal
import time
import shlex
import socket
import select
import threading
import subprocess
import textwrap
from collections import namedtuple
if sys.version_info < (3,3):
    from collections import Hashable
else:
    from collections.abc import Hashable
import json
import logging
import traceback
import argparse

# error codes are also used as exit codes, valid values are [1..255]
ERROR_INTERRUPTED = 1
ERROR_SYNTAX_ERROR = 2
ERROR_PYTHON_VERSION = 21
ERROR_ARGPARSE_MISSING = 22
ERROR_SOCKET_ERROR = 23
ERROR_OTHER_EXCEPTION = 24
ERROR_INVALID_PLACEHOLDER = 25
ERROR_AUTHENTICATION_ERROR = 26
ERROR_OUTPUT_NOT_ESCAPABLE_ERROR = 27
ERROR_PAHO_MISSING = 28
ERROR_PAHO_VERSION = 29
ERROR_NO_CONNECTION_TO_BROKER = 30
ERROR_COULD_NOT_READ_INIT_FILE = 31
IPCONNECTION_ERROR_OFFSET = 200

def fatal_error(message, exit_code):
    logging.critical(message)
    sys.exit(exit_code)

try:
    import paho.mqtt
except ImportError:
    fatal_error("requiring paho 1.3.1 or newer.", ERROR_PAHO_MISSING)

from distutils.version import LooseVersion, StrictVersion
if paho.mqtt.__version__ < StrictVersion("1.3.1"):
    fatal_error("Paho version has to be at lease 1.3.1, but was " + str(paho.mqtt.__version__), ERROR_PAHO_VERSION)

import paho.mqtt.client as mqtt


if sys.hexversion < 0x02070900:
    fatal_error('requiring python 2.7.9 or 3.4 or newer', ERROR_PYTHON_VERSION)

if sys.hexversion > 0x03000000 and sys.hexversion < 0x03040000:
    fatal_error('requiring python 2.7.9 or 3.4 or newer', ERROR_PYTHON_VERSION)

try:
    import argparse
except ImportError:
    fatal_error('requiring python argparse module', ERROR_ARGPARSE_MISSING)

FunctionInfo = namedtuple('FunctionInfo', ['id', 'arg_names', 'arg_types', 'arg_symbols', 'payload_fmt', 'result_names', 'result_symbols', 'response_fmt'])
HighLevelFunctionInfo = namedtuple('HighLevelFunctionInfo',
    ['low_level_id', 'direction',
     'high_level_roles_in', 'high_level_roles_out', 'low_level_roles_in', 'low_level_roles_out',
     'arg_names', 'arg_types', 'arg_symbols', 'format_in', 'result_names', 'result_symbols', 'format_out',
     'chunk_padding', 'chunk_cardinality', 'chunk_max_offset',
     'short_write', 'single_read', 'fixed_length'])
CallbackInfo = namedtuple('CallbackInfo', ['id', 'names', 'symbols', 'fmt', 'high_level_info'])
