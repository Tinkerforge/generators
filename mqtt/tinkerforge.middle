class MQTTCallbackDevice(Device):
    def __init__(self, uid, ipcon, device_class, mqttc):
        Device.__init__(self, uid, ipcon)
        self.publish_paths = {}
        self.callback_names = {}
        self.callback_symbols = {}
        self.device_class = device_class
        self.mqttc = mqttc

    def add_callback(self, callback_id, callback_format, callback_names, callback_symbols, high_level_info):
        self.callback_formats[callback_id] = callback_format
        self.callback_names[callback_id] = callback_names
        self.callback_symbols[callback_id] = callback_symbols
        if high_level_info is not None:
            self.high_level_callbacks[-callback_id] = high_level_info


    def register_callback(self, bindings, callback_id, path):
        if -callback_id in self.high_level_callbacks:
            cid = -callback_id
        else:
            cid = callback_id

        if callback_id not in self.publish_paths:
            self.publish_paths[callback_id] = set()

        self.publish_paths[callback_id].add(path)
        self.registered_callbacks[cid] = lambda *args: bindings.callback_function(self, callback_id, *args)

    def deregister_callback(self, callback_id, path):
        if callback_id not in self.publish_paths:
            logging.debug("Got callback deregistration request, but no registration for topic {} was found. Ignoring the request.".format(path))
            return False
        self.publish_paths[callback_id].discard(path)
        if len(self.publish_paths[callback_id]) == 0:
            self.publish_paths.pop(callback_id)
            self.callback_names.pop(callback_id)
            self.callback_symbols.pop(callback_id)
            self.registered_callbacks.pop(callback_id, None)
        return True
