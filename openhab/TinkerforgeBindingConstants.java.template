/**
 * Copyright (c) 2014,2019 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.smarthome.binding.tinkerforge.internal;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.jdt.annotation.NonNullByDefault;
import org.eclipse.smarthome.core.thing.ThingTypeUID;
import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;

/**
 * The {@link TinkerforgeBindingConstants} class defines common constants, which are
 * used across the whole binding.
 *
 * @author Erik Fleckstein - Initial contribution
 */
@NonNullByDefault
public class TinkerforgeBindingConstants {

    public static final String BINDING_ID = "tinkerforge";

    public static final String PROPERTY_MINIMUM_FIRMWARE_VERSION = "tinkerforge_minimum_firmware_version";
    public static final String PROPERTY_FIRMWARE_URL = "tinkerforge_firmware_url";
    public static final String NEEDS_FIRMWARE_UPDATE_LABEL = " - Firmware too old, please update with Brick Viewer!";

    // List of all Thing Type UIDs
    public static final ThingTypeUID THING_TYPE_BRICK_DAEMON = new ThingTypeUID(BINDING_ID, "brickd");
    {thing_type_decls}
    public static final ThingTypeUID THING_TYPE_OUTDOOR_WEATHER_SENSOR = new ThingTypeUID(BINDING_ID, "outdoorweathersensor");
    public static final ThingTypeUID THING_TYPE_OUTDOOR_WEATHER_STATION = new ThingTypeUID(BINDING_ID, "outdoorweatherstation");
    public static final ThingTypeUID THING_TYPE_REMOTE_SOCKET_TYPE_A = new ThingTypeUID(BINDING_ID, "remotesockettypea");
    public static final ThingTypeUID THING_TYPE_REMOTE_SOCKET_TYPE_B = new ThingTypeUID(BINDING_ID, "remotesockettypeb");
    public static final ThingTypeUID THING_TYPE_REMOTE_SOCKET_TYPE_C = new ThingTypeUID(BINDING_ID, "remotesockettypec");
    public static final ThingTypeUID THING_TYPE_REMOTE_DIMMER_TYPE_B = new ThingTypeUID(BINDING_ID, "remotedimmertypeb");


    public static final List<ThingTypeUID> SUPPORTED_DEVICES = Arrays.asList(THING_TYPE_BRICK_DAEMON,
        {thing_types},
        THING_TYPE_OUTDOOR_WEATHER_SENSOR,
        THING_TYPE_OUTDOOR_WEATHER_STATION,
        THING_TYPE_REMOTE_SOCKET_TYPE_A,
        THING_TYPE_REMOTE_SOCKET_TYPE_B,
        THING_TYPE_REMOTE_SOCKET_TYPE_C,
        THING_TYPE_REMOTE_DIMMER_TYPE_B);

    // List of all Channel Type UIDs
    {channel_type_decls}
    public static final ChannelTypeUID CHANNEL_TYPE_OUTDOOR_WEATHER_SENSOR_TEMPERATURE = new ChannelTypeUID(BINDING_ID, "OutdoorWeatherSensorTemperature");
	public static final ChannelTypeUID CHANNEL_TYPE_OUTDOOR_WEATHER_SENSOR_HUMIDITY = new ChannelTypeUID(BINDING_ID, "OutdoorWeatherSensorHumidity");
    public static final ChannelTypeUID CHANNEL_TYPE_OUTDOOR_WEATHER_SENSOR_LAST_CHANGE = new ChannelTypeUID(BINDING_ID, "OutdoorWeatherSensorLastChange");
    public static final ChannelTypeUID CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_TEMPERATURE = new ChannelTypeUID(BINDING_ID, "OutdoorWeatherStationTemperature");
	public static final ChannelTypeUID CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_HUMIDITY = new ChannelTypeUID(BINDING_ID, "OutdoorWeatherStationHumidity");
	public static final ChannelTypeUID CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_WIND_SPEED = new ChannelTypeUID(BINDING_ID, "OutdoorWeatherStationWindSpeed");
	public static final ChannelTypeUID CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_GUST_SPEED = new ChannelTypeUID(BINDING_ID, "OutdoorWeatherStationGustSpeed");
	public static final ChannelTypeUID CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_RAIN_FALL = new ChannelTypeUID(BINDING_ID, "OutdoorWeatherStationRainFall");
	public static final ChannelTypeUID CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_WIND_DIRECTION = new ChannelTypeUID(BINDING_ID, "OutdoorWeatherStationWindDirection");
	public static final ChannelTypeUID CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_BATTERY_LOW = new ChannelTypeUID(BINDING_ID, "OutdoorWeatherStationBatteryLow");
	public static final ChannelTypeUID CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_LAST_CHANGE = new ChannelTypeUID(BINDING_ID, "OutdoorWeatherStationLastChange");
    public static final ChannelTypeUID CHANNEL_TYPE_REMOTE_SOCKET_TYPE_A_COMMAND = new ChannelTypeUID(BINDING_ID, "RemoteSocketTypeACommand");
	public static final ChannelTypeUID CHANNEL_TYPE_REMOTE_SOCKET_TYPE_B_COMMAND = new ChannelTypeUID(BINDING_ID, "RemoteSocketTypeBCommand");
	public static final ChannelTypeUID CHANNEL_TYPE_REMOTE_SOCKET_TYPE_C_COMMAND = new ChannelTypeUID(BINDING_ID, "RemoteSocketTypeCCommand");
	public static final ChannelTypeUID CHANNEL_TYPE_REMOTE_DIMMER_TYPE_B_VALUE = new ChannelTypeUID(BINDING_ID, "RemoteDimmerTypeBValue");

    public static final Map<ChannelTypeUID, ThingTypeUID> SUPPORTED_CHANNELS;

    static {
        SUPPORTED_CHANNELS = new HashMap<>();
        {channel_type_assigns}
        SUPPORTED_CHANNELS.put(CHANNEL_TYPE_OUTDOOR_WEATHER_SENSOR_TEMPERATURE, THING_TYPE_OUTDOOR_WEATHER_SENSOR);
		SUPPORTED_CHANNELS.put(CHANNEL_TYPE_OUTDOOR_WEATHER_SENSOR_HUMIDITY, THING_TYPE_OUTDOOR_WEATHER_SENSOR);
        SUPPORTED_CHANNELS.put(CHANNEL_TYPE_OUTDOOR_WEATHER_SENSOR_LAST_CHANGE, THING_TYPE_OUTDOOR_WEATHER_SENSOR);
        SUPPORTED_CHANNELS.put(CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_TEMPERATURE, THING_TYPE_OUTDOOR_WEATHER_STATION);
		SUPPORTED_CHANNELS.put(CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_HUMIDITY, THING_TYPE_OUTDOOR_WEATHER_STATION);
		SUPPORTED_CHANNELS.put(CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_WIND_SPEED, THING_TYPE_OUTDOOR_WEATHER_STATION);
		SUPPORTED_CHANNELS.put(CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_GUST_SPEED, THING_TYPE_OUTDOOR_WEATHER_STATION);
		SUPPORTED_CHANNELS.put(CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_RAIN_FALL, THING_TYPE_OUTDOOR_WEATHER_STATION);
		SUPPORTED_CHANNELS.put(CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_WIND_DIRECTION, THING_TYPE_OUTDOOR_WEATHER_STATION);
		SUPPORTED_CHANNELS.put(CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_BATTERY_LOW, THING_TYPE_OUTDOOR_WEATHER_STATION);
		SUPPORTED_CHANNELS.put(CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_LAST_CHANGE, THING_TYPE_OUTDOOR_WEATHER_STATION);
        SUPPORTED_CHANNELS.put(CHANNEL_TYPE_REMOTE_SOCKET_TYPE_A_COMMAND, THING_TYPE_REMOTE_SOCKET_TYPE_A);
		SUPPORTED_CHANNELS.put(CHANNEL_TYPE_REMOTE_SOCKET_TYPE_B_COMMAND, THING_TYPE_REMOTE_SOCKET_TYPE_B);
		SUPPORTED_CHANNELS.put(CHANNEL_TYPE_REMOTE_SOCKET_TYPE_C_COMMAND, THING_TYPE_REMOTE_SOCKET_TYPE_C);
		SUPPORTED_CHANNELS.put(CHANNEL_TYPE_REMOTE_DIMMER_TYPE_B_VALUE, THING_TYPE_REMOTE_DIMMER_TYPE_B);
    }

    public static final URI CONFIG_DESCRIPTION_URI_BRICK_DAEMON = URI.create("thing-type:"+THING_TYPE_BRICK_DAEMON.toString());
    {config_description_decls}
    public static final URI CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_SENSOR = URI.create("thing-type:"+THING_TYPE_OUTDOOR_WEATHER_SENSOR.toString());
    public static final URI CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_SENSOR_TEMPERATURE = URI.create("channel-type:"+CHANNEL_TYPE_OUTDOOR_WEATHER_SENSOR_TEMPERATURE.toString());
	public static final URI CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_SENSOR_HUMIDITY = URI.create("channel-type:"+CHANNEL_TYPE_OUTDOOR_WEATHER_SENSOR_HUMIDITY.toString());
    public static final URI CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_SENSOR_LAST_CHANGE = URI.create("channel-type:"+CHANNEL_TYPE_OUTDOOR_WEATHER_SENSOR_LAST_CHANGE.toString());
    public static final URI CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_STATION = URI.create("thing-type:"+THING_TYPE_OUTDOOR_WEATHER_STATION.toString());
    public static final URI CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_STATION_TEMPERATURE = URI.create("channel-type:"+CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_TEMPERATURE.toString());
	public static final URI CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_STATION_HUMIDITY = URI.create("channel-type:"+CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_HUMIDITY.toString());
	public static final URI CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_STATION_WIND_SPEED = URI.create("channel-type:"+CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_WIND_SPEED.toString());
	public static final URI CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_STATION_GUST_SPEED = URI.create("channel-type:"+CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_GUST_SPEED.toString());
	public static final URI CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_STATION_RAIN_FALL = URI.create("channel-type:"+CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_RAIN_FALL.toString());
	public static final URI CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_STATION_WIND_DIRECTION = URI.create("channel-type:"+CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_WIND_DIRECTION.toString());
	public static final URI CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_STATION_BATTERY_LOW = URI.create("channel-type:"+CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_BATTERY_LOW.toString());
	public static final URI CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_STATION_LAST_CHANGE = URI.create("channel-type:"+CHANNEL_TYPE_OUTDOOR_WEATHER_STATION_LAST_CHANGE.toString());
    public static final URI CONFIG_DESCRIPTION_URI_REMOTE_SOCKET_TYPE_A = URI.create("thing-type:"+THING_TYPE_REMOTE_SOCKET_TYPE_A.toString());
    public static final URI CONFIG_DESCRIPTION_URI_REMOTE_SOCKET_TYPE_A_COMMAND = URI.create("channel-type:"+CHANNEL_TYPE_REMOTE_SOCKET_TYPE_A_COMMAND.toString());
    public static final URI CONFIG_DESCRIPTION_URI_REMOTE_SOCKET_TYPE_B = URI.create("thing-type:"+THING_TYPE_REMOTE_SOCKET_TYPE_B.toString());
    public static final URI CONFIG_DESCRIPTION_URI_REMOTE_SOCKET_TYPE_B_COMMAND = URI.create("channel-type:"+CHANNEL_TYPE_REMOTE_SOCKET_TYPE_B_COMMAND.toString());
    public static final URI CONFIG_DESCRIPTION_URI_REMOTE_SOCKET_TYPE_C = URI.create("thing-type:"+THING_TYPE_REMOTE_SOCKET_TYPE_C.toString());
    public static final URI CONFIG_DESCRIPTION_URI_REMOTE_SOCKET_TYPE_C_COMMAND = URI.create("channel-type:"+CHANNEL_TYPE_REMOTE_SOCKET_TYPE_C_COMMAND.toString());
    public static final URI CONFIG_DESCRIPTION_URI_REMOTE_DIMMER_TYPE_B = URI.create("thing-type:"+THING_TYPE_REMOTE_DIMMER_TYPE_B.toString());
	public static final URI CONFIG_DESCRIPTION_URI_REMOTE_DIMMER_TYPE_B_VALUE = URI.create("channel-type:"+CHANNEL_TYPE_REMOTE_DIMMER_TYPE_B_VALUE.toString());

    public static final Map<URI, ThingTypeUID> SUPPORTED_CONFIG_DESCRIPTIONS;

    static {
        SUPPORTED_CONFIG_DESCRIPTIONS = new HashMap<>();
        SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_BRICK_DAEMON, THING_TYPE_BRICK_DAEMON);
        {config_description_assigns}
        SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_SENSOR, THING_TYPE_OUTDOOR_WEATHER_SENSOR);
        SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_SENSOR_TEMPERATURE, THING_TYPE_OUTDOOR_WEATHER_SENSOR);
		SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_SENSOR_HUMIDITY, THING_TYPE_OUTDOOR_WEATHER_SENSOR);
        SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_SENSOR_LAST_CHANGE, THING_TYPE_OUTDOOR_WEATHER_SENSOR);
        SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_STATION, THING_TYPE_OUTDOOR_WEATHER_STATION);
        SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_STATION_TEMPERATURE, THING_TYPE_OUTDOOR_WEATHER_STATION);
		SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_STATION_HUMIDITY, THING_TYPE_OUTDOOR_WEATHER_STATION);
		SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_STATION_WIND_SPEED, THING_TYPE_OUTDOOR_WEATHER_STATION);
		SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_STATION_GUST_SPEED, THING_TYPE_OUTDOOR_WEATHER_STATION);
		SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_STATION_RAIN_FALL, THING_TYPE_OUTDOOR_WEATHER_STATION);
		SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_STATION_WIND_DIRECTION, THING_TYPE_OUTDOOR_WEATHER_STATION);
		SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_STATION_BATTERY_LOW, THING_TYPE_OUTDOOR_WEATHER_STATION);
        SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_OUTDOOR_WEATHER_STATION_LAST_CHANGE, THING_TYPE_OUTDOOR_WEATHER_STATION);
        SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_REMOTE_SOCKET_TYPE_A, THING_TYPE_REMOTE_SOCKET_TYPE_A);
        SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_REMOTE_SOCKET_TYPE_A_COMMAND, THING_TYPE_REMOTE_SOCKET_TYPE_A);
        SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_REMOTE_SOCKET_TYPE_B, THING_TYPE_REMOTE_SOCKET_TYPE_B);
        SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_REMOTE_SOCKET_TYPE_B_COMMAND, THING_TYPE_REMOTE_SOCKET_TYPE_B);
        SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_REMOTE_SOCKET_TYPE_C, THING_TYPE_REMOTE_SOCKET_TYPE_C);
        SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_REMOTE_SOCKET_TYPE_C_COMMAND, THING_TYPE_REMOTE_SOCKET_TYPE_C);
        SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_REMOTE_DIMMER_TYPE_B, THING_TYPE_REMOTE_DIMMER_TYPE_B);
        SUPPORTED_CONFIG_DESCRIPTIONS.put(CONFIG_DESCRIPTION_URI_REMOTE_DIMMER_TYPE_B_VALUE, THING_TYPE_REMOTE_DIMMER_TYPE_B);
    }
}
