/**
 * Copyright (c) 2010-2020 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

{header}

package org.eclipse.smarthome.binding.tinkerforge.internal.device;

import java.util.Arrays;
import java.util.List;

import com.tinkerforge.IPConnection;

import org.eclipse.jdt.annotation.NonNullByDefault;

/**
 * Builds device wrappers based on their device identifier or thing name.
 * @author Erik Fleckstein - Initial contribution
 */
@NonNullByDefault
public class DeviceWrapperFactory {
    private static final List<DeviceInfo> DEVICE_INFOS;

    static {
        DEVICE_INFOS = Arrays.asList(
            BrickDaemonWrapper.DEVICE_INFO,
            {devices},
            BrickletOutdoorWeatherSensor.DEVICE_INFO,
            BrickletOutdoorWeatherStation.DEVICE_INFO,
            RemoteSocketTypeA.DEVICE_INFO,
            RemoteSocketTypeB.DEVICE_INFO,
            RemoteSocketTypeC.DEVICE_INFO,
            RemoteDimmerTypeB.DEVICE_INFO
        );
    }

    public static DeviceInfo getDeviceInfo(int deviceIdentifier) {
        return DEVICE_INFOS.stream().filter(info -> info.deviceIdentifier == deviceIdentifier).findFirst()
                .orElseThrow(() -> new IllegalArgumentException("Unknown device identifier: " + deviceIdentifier));
    }

    public static DeviceInfo getDeviceInfo(String thingName) {
        return DEVICE_INFOS.stream().filter(info -> info.deviceThingTypeName.equals(thingName)).findFirst()
                .orElseThrow(() -> new IllegalArgumentException("Unknown device thing name: " + thingName));
    }

    public static DeviceWrapper createDevice(int deviceIdentifier, String uid, IPConnection ipcon) throws Exception {
        return (DeviceWrapper) getDeviceInfo(deviceIdentifier).deviceClass
                .getConstructor(String.class, IPConnection.class).newInstance(uid, ipcon);
    }

    public static DeviceWrapper createDevice(String thingName, String uid, IPConnection ipcon) throws Exception {
        return (DeviceWrapper) getDeviceInfo(thingName).deviceClass.getConstructor(String.class, IPConnection.class)
                .newInstance(uid, ipcon);
    }

    public static String getDeviceDisplayName(int deviceIdentifier) {
        return getDeviceInfo(deviceIdentifier).deviceDisplayName;
    }
}
